import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


# 2.1 визуализация данных

path = '/Users/kseniaaksuk/PycharmProjects/линейная регрессия/ex1data2.txt'
df = pd.read_csv(path, header=None, names=['Размер дома', 'Количество спален', 'Цена дома'])

fig = plt.figure()
ax = fig.add_subplot(projection='3d')

ax.scatter(df['Размер дома'], df['Количество спален'], df['Цена дома'], c='black', s=10)
ax.set_xlabel('Размер дома в квадратных футах', fontsize=8)
ax.set_ylabel('Количество спален', fontsize=8)
ax.set_zlabel('Цена дома', fontsize=8)

plt.show()


# 2.2 нормализация данных

a1 = df['Размер дома'].sum() / df['Размер дома'].count()
a2 = df['Количество спален'].sum() / df['Количество спален'].count()

σ1 = np.sqrt(((df['Размер дома'] - a1) ** 2).sum() / df['Размер дома'].count())
σ2 = np.sqrt(((df['Количество спален'] - a2) ** 2).sum() / df['Количество спален'].count())


df['Размер дома'] = (df['Размер дома'] - a1) / σ1
df['Количество спален'] = (df['Количество спален'] - a2) / σ2


# 2.3 реализация функции потерь

# задание матрицы X0 (первый столбец содержит единицы, второй и третий - признаки)
X0 = np.ones((df['Размер дома'].size, 3))
X0[:, 1] = df['Размер дома'].values
X0[:, 2] = df['Количество спален'].values

# задание вектора параметров (начальные значения параметров выбираем нулевыми)
θ = np.array([0, 0, 0]).T

# вектор выходных данных
y = df['Цена дома']

# объем выборки
m = y.size


# задание гипотезы


def h_θ(θ, X0):
    return np.dot(X0, θ)


# функция потерь

def L(θ):
    return np.sum((h_θ(θ, X0) - y) ** 2) / (2 * m)


# 2.4 реализация градиентного спуска

# задание скорости обучения
α = 0.01

# задание числа итераций
iterations_num = 5000

# градиентный спуск


def grad(θ):
    loss = []

    for i in range(iterations_num):
        loss.append(L(θ))
        θ = θ - (α / m) * np.dot((h_θ(θ, X0) - y).T, X0).T

    return θ, loss


θ_updated, loss = grad(θ)


# 2.5 проверка сходимости алгоритма обучения

plt.plot(loss, c='black')
plt.xlabel('Число итераций')
plt.ylabel('Значения функции потерь')
plt.show()

# 2.6 предсказание стоимости дома площадью 1500 квадратных футов с 3 спальнями

print('С помощью алгоритма градиентного спуска:')
print('')
print('параметры: ', θ_updated)
print('стоимость дома:')
print(h_θ(θ_updated, np.array((1, (1500 - a1) / σ1, (3 - a2) / σ2))))
print('')


# 2.7 нахождение параметров линейной регрессии с помощью нормального уравнения,
# предсказание стоимости дома из пункта 2.6,
# сравнение с результатом, полученным с помощью алгоритма градиентного спуска

θ_new = np.dot(np.dot(np.linalg.inv(np.dot(X0.T, X0)), X0.T), y)

print('С помощью нормального уравнения:')
print('')
print('параметры: ', θ_new)
print('стоимость дома:')
print(h_θ(θ_new, np.array((1, (1500 - a1) / σ1, (3 - a2) / σ2))))
print('')